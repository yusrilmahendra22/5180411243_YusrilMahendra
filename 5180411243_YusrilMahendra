#include <iostream>
#include <cstdlib>
#include <math.h>
#include <iomanip>
#define DOKTOR 8
#define MAX 14

using namespace std;

typedef string infotype;
typedef struct tNode *address;
typedef bool status;
typedef int pos;
typedef struct{
	pos Head;
	pos Tail;
	infotype kddok[DOKTOR];
	infotype Nama[DOKTOR];
	infotype keahlian[DOKTOR];
	infotype Usia[DOKTOR];
	status service[DOKTOR];
}Queue;
typedef struct tNode{
	infotype Pasien;
	infotype sewaa;
	infotype Alamatt;
	infotype Umurr;
	infotype Kamar;
	int biayaSewa;
	status sewa;
	address Next;
}rs;
typedef rs *List;


//Tanggal
typedef struct{
	int Tanggal;
	int Bulan;
	int Tahun;
}Date;

//Data Transaksi
typedef struct TNode *ID_Transaksi;
typedef struct TNode{
	infotype Nama_Konsumen;
	infotype Alamat;
	infotype kd;
	infotype Nama_doktor;
	Date Sewa;
	Date Kembali;
	int biayaSewa;
	ID_Transaksi Next;
}transaksi;
typedef transaksi *Transaksi;

//Data Pembayaran
typedef struct TBayar *ID_Pembayaran;
typedef struct TBayar{
	infotype Nama_Konsumen;
	infotype Alamat;
	infotype x;
	infotype Nama_x;
	Date Sewa;
	Date Kembali;
	Date Bayar;
	int Denda;
	int totBiaya;
	ID_Pembayaran Next;
}Pembayaran;
typedef Pembayaran *pembayaran;

typedef rs *List;
void CreateEmpty(List &L);
bool IsEmpty(List L);
bool IsOneElement(List L);
bool isRent(List L);
void RentPertama(List &L,infotype *tnkb,int *biayasewa);
void Rent(List &L,infotype &tnkb,int &biayasewa,pos pilih,int no);
void insertFirst(List &L,address P);
void insertAfter(List &L,address Prec,address P);
address alokasi(infotype a,infotype b,infotype c,infotype tahun,int biaya);
void addMobil(List &L,address P);
void delFirst(List &L);
void delMobil(List &L,int select,int no);
void updateTarif(List &L,int biaya,int select,int no);
void printMobil(List L,int no);
void availableMobil(List L,int no);
void inisialisasiMobil(List &L,infotype tnkb);
void printPembayaran(List L,int no);

void CreateEmpty(Queue *D);
bool isEmpty(Queue D);
bool isFull(Queue D);
bool isTask(Queue D);
bool isOneElement(Queue D);
void addDriver(Queue *D,infotype ktp,infotype nama,infotype alamat,infotype usia);
void Task(Queue *D,infotype *nama);
void updateDriver(Queue *D,infotype update,pos select);
void delDriver(Queue *D,pos select);
void printDriver(Queue D);
void inisialisasiDriver(Queue *D,infotype nama);
void addPembayaran(Queue *D,infotype ktp,infotype nama,infotype alamat,infotype usia);


void CreateEmpty(Transaksi &T);
bool IsEmpty(Transaksi T);
bool IsOneElement(Transaksi T);
void insertFirst(Transaksi &T,ID_Transaksi P);
void insertAfter(Transaksi &T,ID_Transaksi sblm,ID_Transaksi P);
void delPenyewaan(Transaksi &L);
void addPenyewaan(Transaksi &T,ID_Transaksi P);
ID_Transaksi Alokasi(infotype nama_Konsumen,infotype alamat,infotype tnkb,
	infotype nama_Driver,Date sewa,Date kembali,int biayasewa);
void printPenyewaan(Transaksi T,int no);
void delTransaksi(Transaksi &T,infotype *nama_konsumen,infotype *alamat,infotype *tnkb,
	Date *sewa,Date *kembali,infotype *nama_driver,int *biayasewa,pos select,int no);

void CreateEmpty(pembayaran &B);
bool IsEmpty(pembayaran T);
bool IsOneElement(pembayaran T);
ID_Pembayaran Alokasi(infotype nama,infotype alamat,
	infotype tnkb,infotype nama_driver,Date sewa,Date bayar,int denda,int totbiaya);
int hitungBayar(int denda,int sewa,int biaya);
void insertFirst(pembayaran &B,ID_Pembayaran P);
void insertAfter(pembayaran &B,ID_Pembayaran Prec,ID_Pembayaran P);
void addPembayaran(pembayaran &B,ID_Pembayaran P);
void bayarSewa(infotype Nama_Driver,Date kembali,Date Bayar,Date Sewa,int biayaSewa,int &totdenda,int &totbayar);
void printPembayaran(pembayaran T,int no);


int main(){
char penyakitt;
char namaa[50];
char alamatt[75];
int dokterr;
int lamaa;
int kamarr;
char kelamin[25];
int hargaa;
int jasa;
char lagi;
int dibayar;
int totall;
int kembalii;


    Queue sewaa;

	Queue Doktor;
	List pasien;
	Transaksi Penyewaan;
	pembayaran Bayar_sewa;

	address data;
	ID_Transaksi Data_Pinjam;
	ID_Pembayaran Data_Pembayaran;


	infotype a,b,c,tahun;
	int biayasewa = 0;
	int denda = 0;
	int totbiaya = 0;
	infotype nama,ktp,alamat,umur,nama_driver;
	int no=0;
	int pilih;
	int select;
	char opsi;
	Date sewa;
	Date kembali;
	Date bayar;

	CreateEmpty(&Doktor);
	CreateEmpty(pasien);
	CreateEmpty(Penyewaan);
	CreateEmpty(Bayar_sewa);
	data = alokasi("Robi cahyo","Sragen   ","18 th   ","melati ",80000);
	addMobil(pasien,data);
	data = alokasi("Lilik iraw","Klaten   ","26 th   ","mawar  ",100000);
	addMobil(pasien,data);
	addDriver(&Doktor,"0090","Satria","poli Gigi","24");
	addDriver(&Doktor,"0152","Yahya","syaraf","30");
	addDriver(&Doktor,"2153","Dika","THT","36");
	addDriver(&Doktor,"2157","Dinal","Mata","47");


	do{
		cout<<"|=============================|"<<endl;
		cout<<"|     RS PUNYA KELUARGA GUA   |"<<endl;
		cout<<"|=============================|"<<endl;
		cout<<"| 1. Data pasien              |"<<endl;
		cout<<"| 2. Data poli                |"<<endl;
		cout<<"| 3. Transaksi Pembayaran     |"<<endl;
		cout<<"| 0. Keluar                   |"<<endl;
		cout<<"=============================="<<endl;
		cout<<"Pilih Menu : ";
		cin>>pilih;
		system("clear");
		switch(pilih){
			case 1:
				do{
					cout<<"=========================|"<<endl;
					cout<<"        DATA PASIEN      |"<<endl;
					cout<<"=========================|"<<endl;
					cout<<" 1. Tampilkan Data pasien|"<<endl;
					cout<<" 2. Tambah Data pasien   |"<<endl;
					cout<<" 3. Hapus Data pasien    |"<<endl;
					cout<<" 9. Kembali              |"<<endl;
					cout<<"========================="<<endl;
					cout<<"Pilih Menu : ";
					cin>>pilih;
					system("clear");
					switch(pilih){
						case 1:
							cout<<"0. Kembali"<<endl;
							cout<<"========================================================================================="<<endl;
							cout<<"| No |"" Nama pasien|""        Alamat    |""    Umur   |""  Kamar  |"
							"   BIAYA   |""     STATUS     |"<<endl;
							cout<<"=========================================================================================="<<endl;
							printMobil(pasien,no);
							cout<<"-----------------------------------------------------------------------------------------"<<endl;
							cin>>pilih;
							system("clear");

							break;
						case 2:
							cout<<"Masukan nama pasien  : ";
							cin.ignore();
							getline(cin,a);
							cout<<"Masukkan alamat      : ";
							getline(cin,b);
							cout<<"Masukkan Umur pasien : ";
							getline(cin,c);
							cout<<"Masukkan nama kamar  : ";
							cin>>tahun;
							cout<<"Masukkan biiaya kamar: ";
							cin>>biayasewa;

							data = alokasi(a,b,c,tahun,biayasewa);
							addMobil(pasien,data);
							system("clear");

							break;

						case 3:
							cout<<"0. Kembali"<<endl;
							cout<<"-----------------------------------------------------------------------------------------"<<endl;
							cout<<"| No |"<<" Nama pasien|"<<"        Alamat    |"<<"    Umur   |"<<"  Kamar  |"
							<<"   BIAYA   |"<<"     STATUS     |"<<endl;
							cout<<"-----------------------------------------------------------------------------------------"<<endl;
							printMobil(pasien,no);
							cout<<"-----------------------------------------------------------------------------------------"<<endl;
							cout<<"Pilih pasien : ";
							cin>>select;

							delMobil(pasien,select,no);
							system("clear");
							break;
						case 9:
							system("clear");
							break;
						default:
							cout<<"Menu yang anda pilih tidak tersedia"<<endl;
					}
				}while(pilih!=9);

				break;
			case 2:
				do{
                    cout<<"=========================|"<<endl;
					cout<<"         DATA POLI       |"<<endl;
					cout<<"=========================|"<<endl;
					cout<<" 1. Tampilkan Data Dokter|"<<endl;
					cout<<" 2. Hapus Data Dokter    |"<<endl;
					cout<<" 9. Kembali              |"<<endl;
					cout<<"========================="<<endl;
					cout<<"Pilih Menu : ";
					cin>>pilih;
					system("clear");
					switch(pilih){
						case 1:
							cout<<"0. Kembali"<<endl;

							printDriver(Doktor);
							cin>>pilih;
							system("clear");

							break;


						case 2:
							cout<<"0. Kembali"<<endl;

							printDriver(Doktor);
							cout<<"Pilih dokter : ";
							cin>>select;
							delDriver(&Doktor,select);
							system("clear");

							break;
						case 9:
							system("clear");
							break;
						default:
							cout<<"Menu yang anda pilih tidak tersedia"<<endl;
					}
				}while(pilih!=9);

				break;

			case 3:
				do{
					cout<<"================================|"<<endl;
					cout<<"      TRANSAKSI  PEMBAYARAN     |"<<endl;
					cout<<"================================|"<<endl;
					cout<<" 1. Transaksi Pembayaran        |"<<endl;
					cout<<" 9. Kembali                     |"<<endl;
					cout<<"================================|"<<endl;
					cout<<"Pilih Menu : ";
					cin>>pilih;
					system("clear");
					switch(pilih){
						case 1:



awal:
cout<<"================================================="<<endl;
cout<<"              RS PUNYA KELUARGA GUA          "<<endl;
cout<<"================================================="<<endl;
cout<<"        Masukkan Data Anda Dibawah          "<<endl;
cout<<endl;

    cout<<"masukkan nama anda       =";
    cin>>namaa;
    cout<<endl;

    cout<<"Masukkan Alamat Anda     =";
    cin>>alamatt;
    cout<<endl;

    cout<<"Masukkan Lama Menginap   =";
    cin>>lamaa;
    cout<<endl;

    cout<<" Jenis Kamar "<<endl;
    cout<<" 1.melati   "<<endl;
    cout<<" 2.mawar  "<<endl;
    cout<<" 3.Kelas VVIP"<<endl;
    cout<<"Pilih Jenis Kamar Anda[1-3] =";
    cin>>kamarr;

        switch(kamarr)
        {

    case 1:
     hargaa=lamaa*80000;
     cout<<"Kelas I"<<endl;
     cout<<hargaa<<endl;
     break;

    case 2:
     hargaa=lamaa*100000;
     cout<<"Kelas II"<<endl;
     cout<<hargaa<<endl;
     break;

    case 3:
     hargaa=lamaa*500000;
     cout<<"Kelas VVIP"<<endl;
     cout<<hargaa<<endl;
     break;

    default:
    cout<<"Tidak Tersedia";
    }
    cout<<"==================================================="<<endl;
    cout<<"nama    |    alamat   | lama menginap  |total Harga"<<endl;
    cout<<"==================================================="<<endl;
    cout<<namaa<< "           "       <<alamatt<<    "               "  << lamaa<<"               "<<hargaa<<endl;
    cout<<"==================================================="<<endl;

							cin>>pilih;
							system("clear");

							break;
						case 2:
							cout<<"---------------------------------------------------------------------------------------------------------------"<<endl;
							cout<<"|"<<" No "<<"|"<<"   Nama pasien   "
							<<"       Alamat       "<<"|"<<"    Nama Doktor    "<<"|"<<"  Mulai rawat  "<<"|"<<" keluar rawat "<<"|"<<endl;
							cout<<"---------------------------------------------------------------------------------------------------------------"<<endl;

							printPenyewaan(Penyewaan,no);
							cout<<"---------------------------------------------------------------------------------------------------------------"<<endl;
							cout<<"Pilih Transaksi : ";
							cin>>select;
							cout<<"Masukkan Tanggal [dd-mm-yyyy] : ";
							cin>>bayar.Tanggal>>bayar.Bulan>>bayar.Tahun;
							delTransaksi(Penyewaan,&nama,&alamat,&a,&sewa,&kembali,&nama_driver,&biayasewa,select,no);

							//change to available
							inisialisasiMobil(pasien,a);
							inisialisasiDriver(&Doktor,nama_driver);

							//getRealNumber
							bayar.Tanggal = abs(bayar.Tanggal);
							bayar.Bulan = abs(bayar.Bulan);
							bayar.Tahun = abs(bayar.Tahun);

							bayarSewa(nama_driver,kembali,bayar,sewa,biayasewa,denda,totbiaya);
							Data_Pembayaran = Alokasi(nama,alamat,a,nama_driver,sewa,bayar,denda,totbiaya);

							addPembayaran(Bayar_sewa,Data_Pembayaran);
							system("clear");

							break;
						case 9:
							break;
						default:
							cout<<"Menu yang anda pilih tidak tersedia"<<endl;
					}
				}while(pilih!=9);

				break;
			case 0:
				cout<<"Back with darkness"<<endl;
				break;
			default:
				cout<<"Menu yang anda pilih tidak tersedia"<<endl;
		}
	}while(pilih != 0);

	return 0;
}

void CreateEmpty(List &L){
	L = NULL;
}

bool IsEmpty(List L){
	return (L == NULL);
}

bool IsOneElement(List L){
	return (IsEmpty(L->Next));
}

bool isRent(List L){
	return (L->sewa == 1);
}

void insertFirst(List &L,address P){
	P->Next = L;
	L = P;
}

void insertAfter(List &L,address Prec,address P){
	P->Next = Prec->Next;
	Prec->Next = P;
}

address alokasi(infotype tnkb,infotype merk,infotype warna,infotype tahun,int biaya){
	address P = new(rs);

	if(P == NULL)
		return NULL;
	else{
		P->Pasien = tnkb;
		P->Alamatt = merk;
		P->Umurr = warna;
		P->Kamar = tahun;
		P->biayaSewa = biaya;
		P->sewa = 0;
		P->Next = NULL;
		return P;
	}
}

void addMobil(List &L,address P){
	if(IsEmpty(L)){
		insertFirst(L,P);
	}else if(IsOneElement(L)){
		insertAfter(L,L,P);
	}else{
		addMobil(L->Next,P);
	}
}

void delFirst(List &L){
	address P;
	P = L;
	L = L->Next;
	delete(P);
}

void delMobil(List &L,int select,int no){
	if(!IsEmpty(L)){
		no++;
		if(no == select)
			delFirst(L);
		else
			delMobil(L->Next,select,no);
	}else{}
}

void updateTarif(List &L,int biaya,int select,int no){
	if(!IsEmpty(L)){
		no++;
		if(no == select)
			L->biayaSewa = biaya;
		else
			updateTarif(L->Next,biaya,select,no);
	}else{}
}

void Rent(List &L,infotype &tnkb,int &biayasewa,pos pilih,int no){
	if(!IsEmpty(L)){
		no++;
		if(no==pilih){
			L->sewa = 1;
			tnkb = L->Pasien;
			biayasewa = L->biayaSewa;
		}else
			Rent(L->Next,tnkb,biayasewa,pilih,no);
	}
}

void printMobil(List L,int no){
	if(IsEmpty(L)){
		// cout<<"-----------------------------------------------------------------------------------------"<<endl;
	}else{
		no++;
		cout<<"|"<<setw(4)<<no<<"|"<<setw(12)<<L->Pasien<<"|"<<setw(17)<<L->Alamatt<<"|"<<setw(12)<<L->Umurr<<"|"
		<<setw(9)<<L->Kamar<<"|"<<setw(11)<<L->biayaSewa<<"|";
		if(L->sewa==0)
			cout<<setw(17)<<"TERSEDIA|"<<endl;
		else
			cout<<setw(17)<<"DISEWAKAN|"<<endl;
		printMobil(L->Next,no);
	}
}

void availableMobil(List L,int no){
	if(IsEmpty(L)){
		// cout<<"-----------------------------------------------------------------------------------------"<<endl;
	}else{
		if(L->sewa == 0){
			no++;
			cout<<"|"<<setw(4)<<no<<"|"<<setw(12)<<L->Pasien<<"|"<<setw(17)<<L->Alamatt<<"|"<<setw(12)<<L->Umurr<<"|"
		<<setw(9)<<L->Kamar<<"|"<<setw(11)<<L->biayaSewa<<"|";
		}else{}

		availableMobil(L->Next,no);
	}
}

void inisialisasiMobil(List &L,infotype tnkb){
	if(IsEmpty(L)){

	}else{
		if(L->Pasien == tnkb)
			L->sewa = 0;
		inisialisasiMobil(L->Next,tnkb);
	}
}


//Driver
void CreateEmpty(Queue *D){
	(*D).Head = (*D).Tail = -1;
}

bool isEmpty(Queue D){
	return (D.Head == -1 && D.Tail == -1);
}

bool isFull(Queue D){
	return (D.Head < D.Tail && D.Tail - D.Head == DOKTOR-1||
		D.Head > D.Tail && D.Head - D.Tail == 1);
}

bool isOneElement(Queue D){
	return (D.Head == D.Tail && D.Head != -1);
}

bool isTask(Queue D){
	return (D.service[D.Head] == 1);
}

void addDriver(Queue *D,infotype ktp,infotype nama,infotype alamat,infotype usia){
	if(!isFull(*D)){
		if(isEmpty(*D)){ //jika masih kosong
			(*D).Head = (*D).Tail = 0;
			(*D).kddok[(*D).Head] = ktp;
			(*D).Nama[(*D).Head] = nama;
			(*D).keahlian[(*D).Head] = alamat;
			(*D).Usia[(*D).Head] = usia;
			(*D).service[(*D).Head] = 0;
		}else{
			if((*D).Tail == DOKTOR-1){ //jika sirkuler
				(*D).Tail = 0;
			}else{
				(*D).Tail++;
			}
			//pengisian
			(*D).kddok[(*D).Tail] = ktp;
			(*D).Nama[(*D).Tail] = nama;
			(*D).keahlian[(*D).Tail] = alamat;
			(*D).Usia[(*D).Tail] = usia;
			(*D).service[(*D).Tail] = 0;
		}
	}
}

void updateDriver(Queue *D,infotype update,pos select){
	int element = 0;
	if((*D).Head <= (*D).Tail)
		(*D).Usia[(*D).Head + select - 1] = update;
	else{ //sirkuler
		//count element head to MAX element
		for(pos i = (*D).Head; i <= DOKTOR-1;i++)
			element++;

		if(select<=element)
			(*D).Usia[(*D).Head + select - 1] = update;
		else
			(*D).Usia[element - select - 1] = update;
	}
}

void delDriver(Queue *D,pos select){
	int element = 0;

	if(select>=1 && select<=DOKTOR){
		if((*D).Head <= (*D).Tail){
			for(pos i = (*D).Head+select-1; i < (*D).Tail;i++){
				(*D).Nama[i] = (*D).Nama[i+1];
				(*D).kddok[i] = (*D).kddok[i+1];
				(*D).keahlian[i] = (*D).keahlian[i+1];
				(*D).Usia[i] = (*D).Usia[i+1];
				(*D).service[i] = (*D).service[i+1];
			}
			(*D).Tail--;

		}else{

			for(pos i = (*D).Head; i <= DOKTOR-1;i++)
				element++;

			if(select<=element){ //jika masih normal
				for(pos i = (*D).Head; i < DOKTOR-1;i++){
					(*D).Nama[i] = (*D).Nama[i+1];
				(*D).kddok[i] = (*D).kddok[i+1];
				(*D).keahlian[i] = (*D).keahlian[i+1];
				(*D).Usia[i] = (*D).Usia[i+1];
				(*D).service[i] = (*D).service[i+1];
				}

				for(pos i = 0; i < (*D).Tail;i++){
					(*D).Nama[i] = (*D).Nama[i+1];
				(*D).kddok[i] = (*D).kddok[i+1];
				(*D).keahlian[i] = (*D).keahlian[i+1];
				(*D).Usia[i] = (*D).Usia[i+1];
				(*D).service[i] = (*D).service[i+1];
				}
				(*D).Tail--;

			}else{//sirkuler

				if((*D).Tail == 0)
					(*D).Tail = DOKTOR-1;

				else{
					for(pos i = element - select-1; i < (*D).Tail;i++){
						(*D).Nama[i] = (*D).Nama[i+1];
				(*D).kddok[i] = (*D).kddok[i+1];
				(*D).keahlian[i] = (*D).keahlian[i+1];
				(*D).Usia[i] = (*D).Usia[i+1];
				(*D).service[i] = (*D).service[i+1];
					}
					(*D).Tail--;
				}
			}
		}
	}else{
		cout<<"Pilihan yang anda masukkan tidak tersedia"<<endl;
	}
}

void Task(Queue *D,infotype *nama){
	Queue temp;
	if(!isEmpty(*D)){
		*nama = (*D).Nama[(*D).Head];
		(*D).service[(*D).Head] = 1;
		temp = *D;

		(*D).Head++;
		if(++(*D).Tail == MAX)
			(*D).Tail = 0;
		else
			(*D).Tail;

		(*D).kddok[(*D).Tail] = temp.kddok[temp.Head];
		(*D).Nama[(*D).Tail] = temp.Nama[temp.Head];
		(*D).keahlian[(*D).Tail] = temp.Nama[temp.Head];
		(*D).Usia[(*D).Tail] = temp.Usia[temp.Head];
		(*D).service[(*D).Tail] = temp.service[temp.Head];

	}else{
		cout<<"Belum ada data yang tersimpan"<<endl;
	}
}

void printDriver(Queue D){
	pos no = 0;
	if(isEmpty(D)){
		cout<<"Belum ada data driver yang tersimpan"<<endl;
	}else{
		cout<<"-----------------------------------------------------------------------------------------------------------------"<<endl;
		cout<<"|No |"<<"\t kode dokter \t|"<<"\tNama Dokter\t|"<<"\tkeahlian\t\t|"<<"\tUsia\t|"<<"\tStatus\t|"<<endl;
		cout<<"-----------------------------------------------------------------------------------------------------------------"<<endl;
		if(D.Head <= D.Tail){
			for(pos i = D.Head; i <= D.Tail;i++){
				no++;
				cout<<"|"<<setw(3)<<no<<"|"<<setw(19)<<D.kddok[i]<<"|"<<setw(23)<<D.Nama[i]<<"|"
				<<setw(31)<<D.keahlian[i]<<"|"<<setw(9)<<D.Usia[i]<<" Tahun|";
				if(D.service[i]==0)
					cout<<setw(16)<<"Tersedia |"<<endl;
				else
					cout<<setw(16)<<"Bertugas |"<<endl;
			}
		}else{ //sirkuler
			for(pos i = D.Head; i <= DOKTOR-1;i++){
				no++;
				cout<<"|"<<setw(3)<<no<<"|"<<setw(19)<<D.kddok[i]<<"|"<<setw(23)<<D.Nama[i]<<"|"
				<<setw(31)<<D.keahlian[i]<<"|"<<setw(9)<<D.Usia[i]<<" Tahun|";
				if(D.service[i]==0)
					cout<<setw(16)<<"Tersedia |"<<endl;
				else
					cout<<setw(16)<<"Bertugas |"<<endl;
			}

			for(pos i = 0; i <= D.Tail;i++){
				no++;
				cout<<"|"<<setw(3)<<no<<"|"<<setw(19)<<D.kddok[i]<<"|"<<setw(23)<<D.Nama[i]<<"|"
				<<setw(31)<<D.keahlian[i]<<"|"<<setw(9)<<D.Usia[i]<<" Tahun|";
				if(D.service[i]==0)
					cout<<setw(17)<<"Tersedia |"<<endl;
				else
					cout<<setw(17)<<"Bertugas |"<<endl;
			}
		}
		cout<<"-----------------------------------------------------------------------------------------------------------------"<<endl;
	}
}

void inisialisasiDriver(Queue *D,infotype nama){
	if(isEmpty(*D)){

	}else{
		if((*D).Head <= (*D).Tail){
			for(pos i = (*D).Head; i <= (*D).Tail;i++){
				if((*D).Nama[i] == nama){
					(*D).service[i] = 0;
					break;
				}
			}
		}else{
			for(pos i = (*D).Head; i <= DOKTOR-1;i++){
				if((*D).Nama[i] == nama){
					(*D).service[i] = 0;
					break;
				}
			}

			for(pos i = 0; i <= (*D).Tail;i++){
				if((*D).Nama[i] == nama){
					(*D).service[i] = 0;
					break;
				}
			}
		}
	}
}



//transaksi
void CreateEmpty(Transaksi &T){
	T = NULL;
}

bool IsEmpty(Transaksi T){
	return (T==NULL);
}

bool IsOneElement(Transaksi T){
	return(IsEmpty(T->Next));
}

void insertFirst(Transaksi &T,ID_Transaksi P){
	P->Next = T;
	T = P;
}

void insertAfter(Transaksi &T,ID_Transaksi sblm,ID_Transaksi P){
	P->Next = sblm->Next;
	sblm->Next = P;
}



ID_Transaksi Alokasi(infotype nama_Konsumen,infotype alamat,infotype tnkb,infotype nama_Driver,Date sewa,Date kembali,int biayasewa){
	ID_Transaksi P = new(transaksi);

	if(P == NULL)
		return NULL;
	else{
		P->Nama_Konsumen = nama_Konsumen;
		P->Alamat  = alamat;
		P->kd = tnkb;
		P->Nama_doktor = nama_Driver;
		P->Sewa.Tanggal = sewa.Tanggal;
		P->Sewa.Bulan = sewa.Bulan;
		P->Sewa.Tahun = sewa.Tahun;
		P->Kembali.Tanggal = kembali.Tanggal;
		P->Kembali.Bulan = kembali.Bulan;
		P->Kembali.Tahun = kembali.Tahun;
		P->biayaSewa = biayasewa;
		P->Next = NULL;
	}
	return P;
}

void addPenyewaan(Transaksi &T,ID_Transaksi P){
	ID_Transaksi temp = T;
	if(IsEmpty(T))
		insertFirst(T,P);
	else if(IsOneElement(T))
		insertAfter(T,T,P);
	else
		addPenyewaan(T->Next,P);
}

void printPenyewaan(Transaksi T,int no){
	if(IsEmpty(T)){

	}else{
		no++;
		cout<<"|"<<setw(4)<<no<<"|"<<setw(13)<<T->kd<<"|"<<setw(19)<<T->Nama_Konsumen<<"|"<<setw(20)
		<<T->Alamat<<"|"<<setw(19)<<T->Nama_doktor<<"|"<<setw(6)<<T->Sewa.Tanggal<<"-"<<T->Sewa.Bulan
		<<"-"<<T->Sewa.Tahun<<"|"<<setw(6)<<T->Kembali.Tanggal<<"-"<<T->Kembali.Bulan
		<<"-"<<T->Kembali.Tahun<<"|"<<endl;

		printPenyewaan(T->Next,no);
	}
}


//pembayaran
void CreateEmpty(pembayaran &B){
	B = NULL;
}

bool IsEmpty(pembayaran T){
	return (T == NULL);
}

bool IsOneElement(pembayaran T){
	return (IsEmpty(T->Next));
}

int hitungBayar(int denda,int sewa,int biaya){
	int totbayar = 0;
	totbayar = (biaya * sewa) + denda;
	return totbayar;
}

ID_Pembayaran Alokasi(infotype nama,infotype alamat,
	infotype tnkb,infotype nama_driver,Date sewa,Date bayar,int denda,int totbiaya){

	ID_Pembayaran P = new (Pembayaran);

	if(P == NULL)
		return NULL;
	else{
		P->Nama_Konsumen = nama;
		P->Alamat = alamat;
		P->x = tnkb;
		P->Nama_x = nama_driver;
		P->Sewa = sewa;
		P->Bayar = bayar;
		P->Denda = denda;
		P->totBiaya = totbiaya;
		P->Next = NULL;
	}
	return P;
}

void insertFirst(pembayaran &B,ID_Pembayaran P){
	P->Next = B;
	B = P;
}

void insertAfter(pembayaran &B,ID_Pembayaran Prec,ID_Pembayaran P){
	P->Next = Prec->Next;
	Prec->Next = P;
}

void addPembayaran(pembayaran &B,ID_Pembayaran P){
	if(IsEmpty(B))
		insertFirst(B,P);
	else if(IsOneElement(B))
		insertAfter(B,B,P);
	else
		addPembayaran(B->Next,P);
}


void printPembayaran(pembayaran T,int no){
	if(IsEmpty(T)){

	}else{
			no++;
			cout<<"|"<<setw(4)<<no<<"|"<<setw(13)<<T->x<<"|"<<setw(19)<<T->Nama_Konsumen<<"|"<<setw(20)
			<<T->Alamat<<"|"<<setw(19)<<T->Nama_x<<"|"<<setw(6)<<T->Sewa.Tanggal<<"-"<<T->Sewa.Bulan
			<<"-"<<T->Sewa.Tahun<<"|"<<setw(6)<<T->Bayar.Tanggal<<"-"<<T->Bayar.Bulan<<"-"
			<<T->Bayar.Tahun<<"|"<<setw(11)<<T->Denda<<"|"<<setw(13)<<T->totBiaya<<"|"<<endl;

		printPembayaran(T->Next,no);
	}
}

void delPenyewaan(Transaksi &L){
	ID_Transaksi P;
	P = L;
	L = L->Next;
	delete(P);
}

void delTransaksi(Transaksi &T,infotype *nama_konsumen,infotype *alamat,infotype *tnkb,
	Date *sewa,Date *kembali,infotype *nama_driver,int *biayasewa,pos select,int no){
	if(!IsEmpty(T)){
		no++;
		if(no==select){
			*nama_konsumen = T->Nama_Konsumen;
			*alamat = T->Alamat;
			*tnkb = T->kd;
			*sewa = T->Sewa;
			*kembali = T->Kembali;
			*nama_driver = T->Nama_doktor;
			*biayasewa = T->biayaSewa;
			delPenyewaan(T);
		}
		else
			delTransaksi(T->Next,nama_konsumen,alamat,tnkb,sewa,kembali,nama_driver,biayasewa,select,no);
	}
}

void bayarSewa(infotype Nama_Driver,Date kembali,Date Bayar,Date Sewa,int biayaSewa,int &totdenda,int &totbayar){
	int hari = 0;
	int doktor = 200000;
	int denda = 100000;

	if(Bayar.Tanggal - kembali.Tanggal >=1)
		hari = Bayar.Tanggal - kembali.Tanggal;
	else
		hari = 0;

	totdenda = hari * denda;

	if(Nama_Driver == "")
		totbayar = hitungBayar(totdenda,kembali.Tanggal - Sewa.Tanggal,biayaSewa);
	else
		totbayar = hitungBayar(totdenda,kembali.Tanggal - Sewa.Tanggal,biayaSewa) + doktor;
}
